import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { useOverviewGraph } from "virtual:likec4/overview-graph";
import { c as createReactComponent, I as IconFolderFilled, n, u as useUpdateEffect, i, a as nonexhaustive } from "./main-E2hyQKFO.js";
import { u as useRouter } from "./tanstack-router-CF1kJvtP.js";
import { B as BaseEdge, H as Handle, P as Position, u as useNodesState, a as useEdgesState, i as index, b as Background, c as BackgroundVariant } from "./likec4-DF_Jsv_p.js";
import { memo, useRef, useMemo } from "react";
import { P as Paper, c as clsx, G as Group, T as ThemeIcon, a as Text, C as Card, b as CardSection, d as Center, I as Image, B as Box, u as useMantineColorScheme } from "./mantine-BzD51ZKm.js";
import { usePreviewUrl } from "virtual:likec4/previews";
/**
 * @license @tabler/icons-react v3.17.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconLoader = createReactComponent("outline", "loader", "IconLoader", [["path", { d: "M12 6l0 -3", key: "svg-0" }], ["path", { d: "M16.25 7.75l2.15 -2.15", key: "svg-1" }], ["path", { d: "M18 12l3 0", key: "svg-2" }], ["path", { d: "M16.25 16.25l2.15 2.15", key: "svg-3" }], ["path", { d: "M12 18l0 3", key: "svg-4" }], ["path", { d: "M7.75 16.25l-2.15 2.15", key: "svg-5" }], ["path", { d: "M6 12l-3 0", key: "svg-6" }], ["path", { d: "M7.75 7.75l-2.15 -2.15", key: "svg-7" }]]);
/**
 * @license @tabler/icons-react v3.17.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconFileFilled = createReactComponent("filled", "file-filled", "IconFileFilled", [["path", { d: "M12 2l.117 .007a1 1 0 0 1 .876 .876l.007 .117v4l.005 .15a2 2 0 0 0 1.838 1.844l.157 .006h4l.117 .007a1 1 0 0 1 .876 .876l.007 .117v9a3 3 0 0 1 -2.824 2.995l-.176 .005h-10a3 3 0 0 1 -2.995 -2.824l-.005 -.176v-14a3 3 0 0 1 2.824 -2.995l.176 -.005h5z", key: "svg-0" }], ["path", { d: "M19 7h-4l-.001 -4.001z", key: "svg-1" }]]), root = "mxt2a80";
function edgePath(points) {
  return points.reduce((acc, [x, y], i2) => acc + `${i2 === 0 ? "M" : " L"} ${x},${y}`, "");
}
function LinkEdge({
  id,
  data,
  ...props
}) {
  if (!data)
    return null;
  const path = edgePath(data.points);
  return /* @__PURE__ */ jsx(
    BaseEdge,
    {
      id,
      path,
      ...props
    }
  );
}
var handleCenter = "_1n8mzjc0", toplevelNode = "_1n8mzjc1", nestedNode = "_1n8mzjc2", dimmed = "_1n8mzjc3", folderNode = "_1n8mzjc4", fileNode = "_1n8mzjc5", viewNode = "_1n8mzjc6", viewNodeImageSection = "_1n8mzjc7", viewTitle = "_1n8mzjc8";
const FolderNode = /* @__PURE__ */ memo(function({
  data,
  parentId,
  id
}) {
  const isTopLevel = n(parentId);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Handle, { type: "target", position: Position.Top, className: handleCenter }),
    /* @__PURE__ */ jsx(
      Paper,
      {
        p: "sm",
        pt: "xs",
        radius: "md",
        withBorder: !0,
        shadow: isTopLevel ? "lg" : "xs",
        className: clsx(
          folderNode,
          isTopLevel ? toplevelNode : nestedNode,
          data.dimmed && dimmed
        ),
        children: /* @__PURE__ */ jsxs(Group, { gap: 8, children: [
          /* @__PURE__ */ jsx(ThemeIcon, { size: 24, variant: "transparent", color: "dark.4", children: /* @__PURE__ */ jsx(IconFolderFilled, { size: "100%" }) }),
          /* @__PURE__ */ jsx(Text, { size: "lg", fw: 500, children: data.label })
        ] })
      }
    ),
    /* @__PURE__ */ jsx(Handle, { type: "source", position: Position.Bottom, className: handleCenter })
  ] });
}), FileNode = /* @__PURE__ */ memo(function({
  data,
  parentId,
  id
}) {
  const isTopLevel = n(parentId);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Handle, { type: "target", position: Position.Top, className: handleCenter }),
    /* @__PURE__ */ jsx(
      Paper,
      {
        p: "sm",
        pt: "xs",
        radius: "md",
        withBorder: !0,
        shadow: isTopLevel ? "lg" : "xs",
        className: clsx(
          fileNode,
          isTopLevel ? toplevelNode : nestedNode,
          data.dimmed && dimmed
        ),
        children: /* @__PURE__ */ jsxs(Group, { gap: 8, children: [
          /* @__PURE__ */ jsx(ThemeIcon, { size: 24, variant: "transparent", color: "dark.3", children: /* @__PURE__ */ jsx(IconFileFilled, { size: "100%" }) }),
          /* @__PURE__ */ jsx(Text, { size: "lg", fw: 500, children: data.label })
        ] })
      }
    ),
    /* @__PURE__ */ jsx(Handle, { type: "source", position: Position.Bottom, className: handleCenter })
  ] });
}), ViewNode = /* @__PURE__ */ memo(function({
  data,
  height = 320
}) {
  const imageUrl = usePreviewUrl(data.viewId);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Handle, { type: "target", position: Position.Top, className: handleCenter }),
    /* @__PURE__ */ jsxs(
      Card,
      {
        className: clsx(
          viewNode,
          data.dimmed && dimmed
        ),
        withBorder: !0,
        shadow: "xs",
        padding: 0,
        children: [
          /* @__PURE__ */ jsx(CardSection, { className: viewNodeImageSection, children: imageUrl ? /* @__PURE__ */ jsx(
            Image,
            {
              src: imageUrl,
              fit: "contain",
              h: height - 60
            }
          ) : /* @__PURE__ */ jsx(Center, { h: height - 60, children: /* @__PURE__ */ jsxs(Group, { children: [
            /* @__PURE__ */ jsx(ThemeIcon, { size: 60, variant: "transparent", color: "dark", children: /* @__PURE__ */ jsx(IconLoader, { stroke: 1.5, size: "100%" }) }),
            /* @__PURE__ */ jsx(Text, { size: "xl", fw: 500, c: "dimmed", children: "Preview not available" })
          ] }) }) }),
          /* @__PURE__ */ jsx(Box, { className: viewTitle, h: 60, p: "sm", pl: "md", children: /* @__PURE__ */ jsx(Text, { component: "div", size: "lg", fw: 500, children: data.label }) })
        ]
      }
    ),
    /* @__PURE__ */ jsx(Handle, { type: "source", position: Position.Bottom, className: handleCenter })
  ] });
}), nodeTypes = {
  folder: FolderNode,
  file: FileNode,
  view: ViewNode
}, edgeTypes = {
  link: LinkEdge
}, overviewGraphToXYFlowData = (graph) => ({
  nodes: graph.nodes.map(({ id, parentId, position, width, height, ...node }) => {
    const parent = parentId ? graph.nodes.find((n2) => n2.id === parentId) : null, rect = {
      ...position,
      width,
      height
    };
    parent && (position = {
      x: position.x - parent.position.x,
      y: position.y - parent.position.y
    });
    const xyparent = parent ? { parentId: parent.id } : {};
    switch (node.type) {
      case "file":
      case "folder":
        return {
          id,
          type: node.type,
          data: {
            dimmed: !1,
            label: node.label,
            path: node.path,
            rect
          },
          deletable: !1,
          position,
          width,
          height,
          zIndex: 1,
          ...xyparent
        };
      case "view":
        return {
          id,
          type: "view",
          data: {
            dimmed: !1,
            label: node.label,
            viewId: node.viewId,
            rect
          },
          selectable: !1,
          deletable: !1,
          position,
          width,
          height,
          zIndex: 3,
          ...xyparent
        };
      default:
        nonexhaustive(node);
    }
  }),
  edges: graph.edges.map((edge) => ({
    id: edge.id,
    source: edge.source,
    target: edge.target,
    type: "link",
    zIndex: 2,
    hidden: !0,
    data: {
      points: edge.points
    }
  }))
});
function OverviewDiagrams({
  graph,
  fitViewPadding = 0.1,
  zoomable = !0,
  pannable = !0
}) {
  const router = useRouter(), xyflowRef = useRef(), { colorScheme } = useMantineColorScheme(), xyflowdata = useMemo(() => overviewGraphToXYFlowData(graph), [graph]), [nodes, setNodes, onNodesChange] = useNodesState(xyflowdata.nodes), [edges, setEdges, onEdgeChanges] = useEdgesState(xyflowdata.edges);
  useUpdateEffect(() => {
    setNodes(
      (nodes2) => xyflowdata.nodes.map((n2) => {
        const current = nodes2.find((node) => node.id === n2.id);
        return current ? { ...i(current, ["selected", "hidden"]), ...n2 } : n2;
      })
    ), setEdges(xyflowdata.edges);
  }, [xyflowdata.nodes, xyflowdata.edges]);
  const focusedNode = nodes.find((node) => node.selected);
  return useUpdateEffect(() => {
    const xyflow = xyflowRef.current;
    xyflow && (focusedNode ? xyflow.fitView({
      maxZoom: 1,
      padding: fitViewPadding,
      nodes: [focusedNode],
      duration: 450
    }) : xyflow.fitView({
      maxZoom: 1,
      padding: fitViewPadding,
      duration: 800
    }));
  }, [focusedNode?.id ?? null]), /* @__PURE__ */ jsx(
    index,
    {
      colorMode: colorScheme === "auto" ? "system" : colorScheme,
      className: root,
      nodeTypes,
      edgeTypes,
      nodes,
      onNodesChange,
      edges,
      onEdgesChange: onEdgeChanges,
      fitView: !0,
      fitViewOptions: useMemo(() => ({
        minZoom: 0.05,
        maxZoom: 1,
        padding: fitViewPadding,
        includeHiddenNodes: !0
      }), [fitViewPadding]),
      nodesDraggable: !1,
      nodesConnectable: !1,
      nodesFocusable: !0,
      edgesReconnectable: !1,
      edgesFocusable: !1,
      multiSelectionKeyCode: null,
      zoomOnPinch: zoomable,
      zoomOnScroll: !pannable && zoomable,
      zoomOnDoubleClick: !1,
      ...!zoomable && {
        zoomActivationKeyCode: null
      },
      maxZoom: zoomable ? 2 : 1,
      minZoom: zoomable ? 0.01 : 1,
      preventScrolling: zoomable || pannable,
      noDragClassName: "nodrag",
      noPanClassName: "nopan",
      panOnScroll: pannable,
      panOnDrag: pannable,
      ...!pannable && {
        selectionKeyCode: null
      },
      onInit: (instance) => xyflowRef.current = instance,
      onNodeClick: (event, node) => {
        if (node.type === "view") {
          event.stopPropagation(), setNodes((nodes2) => nodes2.map(({ data, ...n2 }) => ({ ...n2, data: { ...data, dimmed: n2.id !== node.id } }))), xyflowRef.current?.fitView({
            maxZoom: 10,
            padding: 0,
            nodes: [node],
            duration: 1200
          }), setTimeout(() => {
            xyflowRef.current?.updateNodeData(node.id, { dimmed: !0 });
          }, 400), setTimeout(() => {
            router.navigate({
              to: "/view/$viewId/",
              params: {
                viewId: node.data.viewId
              },
              search: !0
            });
          }, 800);
          return;
        }
        node.selected && (event.stopPropagation(), setNodes((nodes2) => nodes2.map((n2) => n2.id === node.id ? { ...n2, selected: !1 } : n2)));
      },
      children: /* @__PURE__ */ jsx(Background, { variant: BackgroundVariant.Dots, size: 4, gap: 50 })
    }
  );
}
function OverviewPage() {
  const graph = useOverviewGraph();
  return /* @__PURE__ */ jsx(Box, { pos: "fixed", inset: 0, children: /* @__PURE__ */ jsx(OverviewDiagrams, { graph }) });
}
export {
  OverviewPage as default
};
